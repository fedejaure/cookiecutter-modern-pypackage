{% set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD': 'License :: OSI Approved :: BSD License',
    'ISC': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
    'GNU General Public License v3': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} %}
[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = ["{{ cookiecutter.full_name }} <{{ cookiecutter.email }}>"]
{% if cookiecutter.open_source_license == "Not open source" %}
license = "{{ cookiecutter.open_source_license }}"
{% endif %}
readme = "README.md"
homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_name }}"
repository = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_name }}"
documentation = "https://{{ cookiecutter.project_name }}.readthedocs.io"
keywords = ["{{ cookiecutter.project_name }}"]
classifiers=[
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    {% if cookiecutter.open_source_license in license_classifiers %}
    "{{ license_classifiers[cookiecutter.open_source_license] }}",
    {% endif %}
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
{% if cookiecutter.project_name.lower().replace('-', '_') != cookiecutter.project_slug %}
packages = [
    { include = "{{ cookiecutter.project_slug }}", from = "src" },
]
{% endif %}

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_name }}/issues"


{% if cookiecutter.command_line_interface|lower == 'click' %}
[tool.poetry.scripts]
{{ cookiecutter.project_name }} = '{{ cookiecutter.project_slug }}.cli:main'
{% endif %}

[tool.poetry.dependencies]
python = "<3.12,>=3.8"
{% if cookiecutter.command_line_interface|lower == 'click' %}
click = "^8.1.3"
{% endif %}

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.5.0"
invoke = "^2.2.0"
bump2version = "^1.0.1"
watchdog = {version = "^3.0.0", extras = ["watchmedo"]}

[tool.poetry.group.test.dependencies]
pytest = "^7.3.1"
xdoctest = "^1.1.1"
coverage = {version = "^7.2.6", extras = ["toml"]}
pytest-cov = "^4.1.0"

[tool.poetry.group.format.dependencies]
isort = "^5.12.0"
black = "^23.3.0"

[tool.poetry.group.linters.dependencies]
flake8 = ">=4.0.1,<5.0.0"
flakeheaven = "^3.3.0"
flake8-builtins = "^2.1.0"
flake8-blind-except = "^0.2.1"
flake8-logging-format = "^0.9.0"
flake8-bugbear = "^23.3.12"
flake8-annotations = "^2.9.1"
flake8-docstrings = "^1.7.0"
flake8-bandit = "^3.0.0"
flake8-broken-line = "^0.6.0"
darglint = "^1.8.1"

[tool.poetry.group.security.dependencies]
safety = "^2.4.0b1"

[tool.poetry.group.typing.dependencies]
mypy = "^1.3.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.1.2"
recommonmark = "^0.7.1"

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["{{ cookiecutter.project_slug }}"]

[tool.coverage.report]
fail_under = 100
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug",
  "if settings.DEBUG:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == __main__:"
]
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.flakeheaven]
format = "grouped"
max_line_length = 99
show_source = true
docstring-convention = "google"
extended_default_ignore = []

[tool.flakeheaven.plugins]
pyflakes = ["+*"]
pycodestyle = ["+*"]
mccabe = ["+*"]
flake8-annotations = ["+*", "-ANN1??", "-ANN401"]
flake8-docstrings = ["+*", "-D212"]
"flake8-*" = ["+*"]
pylint = ["-C????", "-E????", "+F????", "+I????", "-R????", "-W????"]

[tool.flakeheaven.exceptions."tests/"]
flake8-bandit = ["-S101"]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 99
known_third_party = ["invoke", "nox", "nox_poetry"]

[tool.black]
line-length = 99
target-version = ["py38"]

[tool.mypy]
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = ["pytest.*", "invoke.*", "nox.*", "nox_poetry.*"]
allow_redefinition = false
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = true
local_partial_types = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_unused_ignores = true
warn_unreachable = true
warn_no_return = true

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
