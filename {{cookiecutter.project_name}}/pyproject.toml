{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD': 'License :: OSI Approved :: BSD License',
    'ISC': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
    'GNU General Public License v3': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} -%}
[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = ["{{ cookiecutter.full_name }} <{{ cookiecutter.email }}>"]
{% if cookiecutter.open_source_license == "Not open source" -%}
license = "{{ cookiecutter.open_source_license }}"
{% endif -%}
readme = "README.md"
homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_name }}"
repository = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_name }}"
documentation = "https://{{ cookiecutter.project_name }}.readthedocs.io"
keywords = ["{{ cookiecutter.project_name }}"]
classifiers=[
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    {%- if cookiecutter.open_source_license in license_classifiers %}
    "{{ license_classifiers[cookiecutter.open_source_license] }}",
    {%- endif %}
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
{%- if cookiecutter.project_name.lower().replace('-', '_') != cookiecutter.project_slug %}
packages = [
    { include = "{{ cookiecutter.project_slug }}", from = "src" },
]
{%- endif %}

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_name }}/issues"

{%- if cookiecutter.command_line_interface|lower == 'typer' %}

[tool.poetry.scripts]
{{ cookiecutter.project_name }} = '{{ cookiecutter.project_slug }}.cli:app'
{%- endif %}

[tool.poetry.dependencies]
python = "<3.13,>=3.9"
{%- if cookiecutter.command_line_interface|lower == 'typer' %}
typer = {extras = ["all"], version = "^0.13.0"}
{%- endif %}

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
invoke = "^2.2.0"
bump2version = "^1.0.1"
watchdog = {version = "^6.0.0", extras = ["watchmedo"]}

[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
xdoctest = "^1.2.0"
coverage = {version = "^7.5.3", extras = ["toml"]}
pytest-cov = "^5.0.0"

[tool.poetry.group.linters.dependencies]
isort = "^5.13.2"
black = "^24.10.0"
ruff = "^0.7.1"

[tool.poetry.group.security.dependencies]
safety = "^3.2.11"

[tool.poetry.group.typing.dependencies]
mypy = "^1.13.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.4.7"
recommonmark = "^0.7.1"

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["{{ cookiecutter.project_slug }}"]

[tool.coverage.report]
fail_under = 100
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug",
  "if settings.DEBUG:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == __main__:"
]
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
target-version = "py39"
output-format = "full"
line-length = 99
fix = true
extend-exclude = [
    "docs/*",
]

[tool.ruff.lint]
select = [
  "E", "F", "W",  # flake8
  "C",  # mccabe
  "I",  # isort
  "N",  # pep8-naming
  "D",  # flake8-docstrings
  "ANN",  # flake8-annotations
  "S",  # flake8-bandit
  "BLE",  # flake8-blind-except
  "B",  # flake8-bugbear
  "A",  # flake8-builtins
  "G",  # flake8-logging-format
  "ERA",  # eradicate
  "ISC",  # flake8-implicit-str-concat
  "RUF",  # Ruff-specific rules
]
ignore = ["ANN101"]
unfixable = [
  "ERA",  # Don't remove commented-out code
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["{{ cookiecutter.project_slug }}"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 99
known_third_party = ["invoke", "nox", "nox_poetry"]

[tool.black]
line-length = 99
target-version = ["py39"]

[tool.mypy]
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = ["pytest.*", "invoke.*", "nox.*", "nox_poetry.*"]
allow_redefinition = false
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = true
local_partial_types = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_unused_ignores = true
warn_unreachable = true
warn_no_return = true

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
