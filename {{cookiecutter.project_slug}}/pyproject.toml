{% set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD': 'License :: OSI Approved :: BSD License',
    'ISC': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
    'GNU General Public License v3': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} %}
[tool.poetry]
name = "{{ cookiecutter.project_name | slugify }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = ["{{ cookiecutter.full_name }} <{{ cookiecutter.email }}>"]
{% if cookiecutter.open_source_license == "Not open source" %}
license = "{{ cookiecutter.open_source_license }}"
{% endif %}
readme = "README.md"
homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"
repository = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"
keywords = ["{{ cookiecutter.project_slug }}"]
classifiers=[
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    {% if cookiecutter.open_source_license in license_classifiers %}
    "{{ license_classifiers[cookiecutter.open_source_license] }}",
    {% endif %}
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
]

{% if cookiecutter.command_line_interface|lower == 'click' %}
[tool.poetry.scripts]
{{ cookiecutter.project_slug }} = '{{ cookiecutter.project_slug }}.cli:main'
{% endif %}

[tool.poetry.dependencies]
python = "<3.9,>=3.6.1"
{% if cookiecutter.command_line_interface|lower == 'click' %}
click = "^7.1.2"
{% endif %}

[tool.poetry.dev-dependencies]
invoke = "^1.4.1"
flake8 = "3.7.9"
flakehell = "^0.3.3"
flake8-builtins = "^1.5.3"
flake8-blind-except = "^0.1.1"
flake8-logging-format = "^0.6.0"
flake8-bugbear = "^20.1.4"
flake8-annotations = "^2.1.0"
flake8-docstrings = "^1.5.0"
darglint = "^1.3.0"
isort = "^4.3.21"
black = "^19.10b0"
safety = "^1.9.0"
mypy = "^0.770"
pytype = "^2020.6.1"
sphinx = "^3.0.4"
sphinx-autodoc-typehints = "^1.10.3"
recommonmark = "^0.6.0"
bump2version = {git = "https://github.com/mckelvin/bump2version.git", rev = "handle-special-char"}
pytest = "^5.4.2"
xdoctest = "^0.12.0"
coverage = {version = "^5.1", extras = ["toml"]}
pytest-cov = "^2.8.1"

[tool.coverage.run]
branch = true

[tool.coverage.report]
fail_under = 100
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug",
  "if settings.DEBUG:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == __main__:"
]
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.flakehell]
format = "grouped"
max_line_length = 99
show_source = true

[tool.flakehell.plugins]
pyflakes = ["+*"]
pycodestyle = ["+*"]
mccabe = ["+*"]
"flake8-*" = ["+*"]
darglint = ["+*"]
docstring-convention = "google"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 99
known_third_party = ["invoke", "nox"]

[tool.black]
line-length = 99
target-version = ["py36"]

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
